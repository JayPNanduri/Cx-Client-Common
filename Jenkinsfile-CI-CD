#!/groovy
@Library('cx-jenkins-pipeline-kit') _

def workspace
def upgradeTemplate = "dynamicSmoke2016_without_MO"
def vmNameUpgrade = "CxSAST-9.0-${BUILD_TAG}"
def ipAddressUpgrade

pipeline {
    parameters {
        //string(name: "cxCommonVersion",defaultValue: "2020.2.20.SCA", description: "Version of CxCommon")
        string(name: "ram",defaultValue: "12000", description: "Server memory")
        string(name: "cpu",defaultValue: "4", description: "")
        string(name: "provider",defaultValue: "VMWARE", description: "IAAS platform to be used")
        string(name: "decommissionPeriod",defaultValue: "1 hour", description: "Decommission period")
        string(name: "vmwareNetwork",defaultValue: "Lab", description: "vmware network for new VMs")
        choice(name: 'automationBranch', choices: ['9.0.0', 'master', '9.2.0i','9.3.0-QM', '9.3-WO-NQM', '9.0.0-QM', '8.9.0'], description: ' master ->For CX 8.8.X 8.7.0 -> For CX 8.7.X 8.6.0 -> For CX 8.6.X')
    }
    agent { node { label 'CxSDLC-Slave' } }
    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        //skipDefaultCheckout()
    }
    stages {

        stage('Pipeline Info') {
            steps {
                script {
                    sh 'printenv'
                    workspace = pwd()
                }
            }
        }

        stage('Remove SNAPSHOT from POM') {
            when {
                expression { BRANCH_NAME == 'master' }
            }
            steps {
                script {
                    sh "sed -e 's/-SNAPSHOT//g' -i ./pom.xml"
                }
            }
        }

        stage('Build CxCommon') {
            steps {
                script {
                    //todo: change version to parameter in pom.xml and use mvn -D parameter
                    sh "sed -e 's/2020\\.2\\.20\\.SCA/${BUILD_TAG}/g' -i ./pom.xml"
                    sh "docker run --rm --name build-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -w /usr/src/cx-common maven:3.6.1-jdk-8-alpine mvn clean install -DskipTests"
                }
            }
        }

        stage('UT-IT & Sonar') {
            parallel {
                stage('Run Unit & Integration Tests') {
                    steps {
                        script {
                            sh "docker run --rm --name build-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -w /usr/src/cx-common maven:3.6.1-jdk-8-alpine mvn test"
                        }
                    }
                }

                stage('Run Code Quality') {
                    steps {
                        script {
                            sh "docker run --rm --name sonar-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-common -w /usr/src/cx-common maven:3.6.1-jdk-8-alpine mvn sonar:sonar"
                        }
                    }
                }
            }
        }

        stage('9.0') {
            when {
                expression { BRANCH_NAME == 'master' || BRANCH_NAME.startsWith("PR-") || BRANCH_NAME == 'eitanas1-new-jenkinsfile'}
            }
            stages {

                stage('Create VM') {
                    steps {
                        script {
                            kit.Create_Vm_Terraform(vmNameUpgrade, upgradeTemplate, ram, cpu, provider, decommissionPeriod, "Auto", "Dynamic-CI", vmwareNetwork)
                            ipAddressUpgrade = kit.getIpAddress(vmNameUpgrade, provider)
                            //if (isLDAP == 'true') {
                            //    kit.Cx_Join_To_Domain(vmNameUpgrade, ipAddressUpgrade)
                            //}
                            node('install01') {
                                kit.Create_Jenkins_Slave_On_Master(vmNameUpgrade)
                                kit.Start_Jenkins_Slave_On_Windows_Pstools(ipAddressUpgrade, vmNameUpgrade)
                            }
                        }
                    }
                }

                stage('Pull Automation Code') {
                    steps {
                        dir("${workspace}/Checkmarx-System-Test") {
                            git branch: automationBranch, credentialsId: '15f8e7b7-6ce7-44c0-b151-84f99ffa7aed', poll: false, url: 'http://tfs2013:8080/tfs/DefaultCollection/Automation/_git/Checkmarx-System-Test'
                            //todo: change version to parameter in pom.xml and use mvn -D parameter
                            sh "sed -e 's/2020\\.2\\.20\\.SCA/${BUILD_TAG}/g' -i ./PluginsCommonClient/pom.xml"
                            sh "cp -r ../../env ."
                            sh "sed -e 's/<CxSastIpAddress>/${ipAddressUpgrade}/g' -i ./env/topology.xml"
                        }
                    }
                }

                stage('Plugins API Sanity Test') {
                    steps {
                        dir("${workspace}/Checkmarx-System-Test") {
                            //todo: cancel ignore tests failures (maven.test.failure.ignore)
                            sh "docker run --rm --name plugins-api-sanity-test-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                            mvn -q clean test -Dtest=com.cx.automation.plugin.test.cxcommonclient.sanity.* -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                        }
                    }
                }

                stage('Plugins API Smoke Tests') {
                    steps {
                        dir("${workspace}/Checkmarx-System-Test") {
                            //todo: cancel ignore tests failures (maven.test.failure.ignore)
                            sh "docker run --rm --name plugins-api-smoke-tests-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                            mvn -q test -Dtest=com.cx.automation.plugin.test.cxcommonclient.PluginsCxSASTSmokeTests,com.cx.automation.plugin.test.cxcommonclient.PluginsCxMandOAndOSASmokeTests \
                                -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                        }
                    }
                }

                stage('Plugins CxCommonClient All Tests') {
                    steps {
                        dir("${workspace}/Checkmarx-System-Test") {
                            //todo: cancel ignore tests failures (maven.test.failure.ignore)
                            sh "docker run --rm --name plugins-api-smoke-tests-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}/Checkmarx-System-Test:/usr/src/automation -w /usr/src/automation maven:3.6.1-jdk-8-alpine \
                            mvn -q test -Dtest=com.cx.automation.plugin.test.cxcommonclient.scan.*,com.cx.automation.plugin.test.cxcommonclient.osa.* \
                                -Dtopology.xml.ref=/usr/src/automation/env/topology.xml -Denv=hardening_env -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -DskipTests=false"
                        }
                    }
                }
            }

            post {
                always {
                    script {
                        dir("${workspace}/Checkmarx-System-Test") {
                            junit '**/PluginsCommonClient/target/surefire-reports/**/*.xml'
                        }
                        if (ipAddressUpgrade != null) {
                            deleteVm(provider, ipAddressUpgrade, vmNameUpgrade)
                        }
                    }
                }
            }
        }
    }

    post {
        /*always {
            script {
                if (ipAddressUpgrade != null) {
                    deleteVm(provider, ipAddressUpgrade, vmNameUpgrade)
                }
            }
        }*/
        cleanup {
            script{
                cleanWs()
            }
        }
    }
}